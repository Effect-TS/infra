---
name: Terraform Enforcement

on:
  push:
    branches:
      - main
    paths:
      - terraform/**

  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
  TF_LOG: INFO

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform_enforcement:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        terraform_environment: [aws, github]

    defaults:
      run:
        shell: bash
        working-directory: terraform/${{ matrix.terraform_environment }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.DEFAULT_AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-AssumeRoleWithAction

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          TF_ENVIRONMENT: ${{ matrix.terraform_environment }}
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
                comment.body.includes('Terraform Enforcement Summary (${{ env.TF_ENVIRONMENT }})')
            )

            const output = `## Terraform Enforcement Summary (${{ env.TF_ENVIRONMENT }})
            #### Terraform Format and Style: üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization: ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation: ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan: üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_ENVIRONMENT }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
